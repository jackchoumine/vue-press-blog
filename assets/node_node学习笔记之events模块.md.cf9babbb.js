import{_ as s,o as n,c as e,R as a}from"./chunks/framework.bf742a9e.js";const d=JSON.parse('{"title":"node 学习笔记 --- events 模块","description":"","frontmatter":{},"headers":[],"relativePath":"node/node学习笔记之events模块.md","filePath":"node/node学习笔记之events模块.md"}'),l={name:"node/node学习笔记之events模块.md"},o=a(`<h1 id="node-学习笔记-events-模块" tabindex="-1">node 学习笔记 --- events 模块 <a class="header-anchor" href="#node-学习笔记-events-模块" aria-label="Permalink to &quot;node 学习笔记 --- events 模块&quot;">​</a></h1><p>events 模块只提供了一个对象：events.EventEmitter，是事件发射和事件监听器的封装。<code>EventEmitter</code> 的每个事件由一个事件名和若干<strong>参数</strong>组成。每个事件可用若干监听器，发射事件后，监听器依次调用，事件参数作为回调函数的参数传递。</p><h2 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test.1.js</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> events </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">events</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//声明一个事件发生器</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> emitter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> events</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EventEmitter</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 为 someEvent 事件注册监听器</span></span>
<span class="line"><span style="color:#A6ACCD;">emitter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someEvent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">parm1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">parm2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">listener1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parm1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parm2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 触发事件 第一个参数是事件名，第二个之后的参数是监听器参数</span></span>
<span class="line"><span style="color:#A6ACCD;">emitter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">someEvent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1994</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="eventemitter-常用-api" tabindex="-1">EventEmitter 常用 API <a class="header-anchor" href="#eventemitter-常用-api" aria-label="Permalink to &quot;EventEmitter 常用 API&quot;">​</a></h2><ul><li><code>on(eventName,listener)</code>，为 <code>eventName</code>事件绑定一个监听器；</li><li><code>emit(eventName[,arg1,arg2])</code> 触发 <code>eventName</code>事件，arg1,arg2 作为监听器的参数；</li><li><code>once(eventName,listener)</code>,单次绑定监听器；</li><li><code>removeListener(eventName,listener)</code>，移除绑定事件；</li><li><code>removeAllListener([eventName])</code>，移除所有监听器。</li></ul><p>我们不会直接用 EventEmitter，而是用它的继承对象。比如 fs、net、http 等，只要支持事件响应的核心模块，都是 <code>EventEmitter</code>的子类。</p><h3 id="这么设计的原因" tabindex="-1">这么设计的原因 <a class="header-anchor" href="#这么设计的原因" aria-label="Permalink to &quot;这么设计的原因&quot;">​</a></h3><ul><li><code>具体功能的对象</code>实现事件，更符合语义，事件的监听和发射，应该是是一个对象的方法；</li><li>JS 继承机制基于原型，支持多重继承，不会打乱对象原有的继承关系。</li></ul>`,9),t=[o];function p(r,c,i,D,y,F){return n(),e("div",null,t)}const C=s(l,[["render",p]]);export{d as __pageData,C as default};
