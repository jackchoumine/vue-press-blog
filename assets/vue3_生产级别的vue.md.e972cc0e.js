import{_ as s,o as a,c as n,R as l}from"./chunks/framework.bf742a9e.js";const d=JSON.parse('{"title":"生产级别的 vue ---《Production-Grade Vue.js》课程笔记","description":"","frontmatter":{},"headers":[],"relativePath":"vue3/生产级别的vue.md","filePath":"vue3/生产级别的vue.md"}'),p={name:"vue3/生产级别的vue.md"},e=l(`<h1 id="生产级别的-vue-《production-grade-vue-js》课程笔记" tabindex="-1">生产级别的 vue ---《<a href="https://frontendmasters.com/courses/production-vue/" target="_blank" rel="noreferrer">Production-Grade Vue.js</a>》课程笔记 <a class="header-anchor" href="#生产级别的-vue-《production-grade-vue-js》课程笔记" aria-label="Permalink to &quot;生产级别的 vue ---《[Production-Grade Vue.js](https://frontendmasters.com/courses/production-vue/)》课程笔记&quot;">​</a></h1><p>花了 3 个小时，听了 front master 的 production-grade vue 课程，课程不错，比较基础，但是也学到了一些东西，现在总结如下。</p><h2 id="拆分组件的标识" tabindex="-1">拆分组件的标识 <a class="header-anchor" href="#拆分组件的标识" aria-label="Permalink to &quot;拆分组件的标识&quot;">​</a></h2><p>哪种情况下拆分组件，有时候往往没有一个清晰的边界，以下几种情况，需要拆分组件：</p><ul><li><p>发现组件难以阅读</p></li><li><p>难以简洁明确的描述组件职责</p></li></ul><p>单一职责是软件设计的黄金法则。</p><ul><li>组件内<strong>单独一段代码</strong>具有自己的状态</li></ul><p>组件内有一个状态不和其他状态产生关联，可拆分成单独组件，让组件更加清晰。</p><h2 id="更好的组织你的目录" tabindex="-1">更好的组织你的目录 <a class="header-anchor" href="#更好的组织你的目录" aria-label="Permalink to &quot;更好的组织你的目录&quot;">​</a></h2><p>目录嵌套太深，不利于重构和浏览文件。</p><p>课程里推荐<strong>两层</strong>的目录，从命名上把相关的文件组织到一起，比如：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">srr</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">components</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DashboardHeader.vue</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DashboardHeader.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.vue</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样命名，组件被 vscode 聚拢到一起，方便阅读。</p><p>但是实际上命名一直是很多人难题，很多人也不愿意花点时间，思考命名，所以我更推荐最多三层目录，把相关组件组织到单独目录下，使用 index 导出变量：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">srr</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">components</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 文件大写</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DashboardHeader.vue</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DashboardHeader.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.vue</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 导出相关变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>或者</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">srr</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">components</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 文件大写</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Header.vue</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Header.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.test.js</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Dashboard.vue</span></span>
<span class="line"><span style="color:#FFCB6B;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;"> </span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.js</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 导出相关变量</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="如何解决-props-base-设计的问题" tabindex="-1">如何解决 props-base 设计的问题 <a class="header-anchor" href="#如何解决-props-base-设计的问题" aria-label="Permalink to &quot;如何解决 props-base 设计的问题&quot;">​</a></h2><p>props-base 设计方法面对简单的功能时，可胜任，但是所有组件的功能都通过 props 来实现，props 就会变得很多，或者层层传递 props，造成 props 钻井。</p><p>具体来说，props-base 设计有这些问题：</p><ul><li><p>新功能会增加复杂性</p></li><li><p>职责不单一</p></li><li><p>在模板中会出现大量<code>v-if</code></p></li><li><p>难以扩展</p></li><li><p>难以维护</p></li><li><p>难以使用</p></li></ul><h3 id="transparent-component-透明组件-可减缓上述问题" tabindex="-1">transparent component （透明组件）可减缓上述问题 <a class="header-anchor" href="#transparent-component-透明组件-可减缓上述问题" aria-label="Permalink to &quot;transparent component （透明组件）可减缓上述问题&quot;">​</a></h3><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$listeners</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{...$attrs,...$props}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">inheritAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><blockquote><p>通过 <code>v-on=&quot;$listeners&quot;</code> 和 <code>v-bind=&quot;{...$attrs,...$props}&quot;</code> 可绑定多个事件和多个值。</p></blockquote><h3 id="provide-和-inject" tabindex="-1">provide 和 inject <a class="header-anchor" href="#provide-和-inject" aria-label="Permalink to &quot;provide 和 inject&quot;">​</a></h3><p>通过 provide 和 inject 可轻松在跨级组件之间共享数据，减缓 props 钻井问题。</p><blockquote><p>provide 和 inject 在 vue 插件中才能才能发挥其巨大威力，在业务项目中使用多了，会导致数据来源不清楚，应少用。</p></blockquote><h2 id="vue-meta-在路由中的使用" tabindex="-1">vue-meta 在路由中的使用 <a class="header-anchor" href="#vue-meta-在路由中的使用" aria-label="Permalink to &quot;vue-meta 在路由中的使用&quot;">​</a></h2><p>这个网站的 seo 有关，感觉不够实用。</p><h2 id="如何确保用户导航到某个路由自己都重新渲染" tabindex="-1">如何确保用户导航到某个路由自己都重新渲染？ <a class="header-anchor" href="#如何确保用户导航到某个路由自己都重新渲染" aria-label="Permalink to &quot;如何确保用户导航到某个路由自己都重新渲染？&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">router-view</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:key</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$route.fullPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="测试最佳实践" tabindex="-1">测试最佳实践 <a class="header-anchor" href="#测试最佳实践" aria-label="Permalink to &quot;测试最佳实践&quot;">​</a></h2><ul><li><p>不测 vue，比如测试生命周期函数的调用</p></li><li><p>使用生成器生成模板代码，比如<code>plop.js</code></p></li></ul><h2 id="如何制定团队的最佳实践-规范" tabindex="-1">如何制定团队的最佳实践 --- 规范 <a class="header-anchor" href="#如何制定团队的最佳实践-规范" aria-label="Permalink to &quot;如何制定团队的最佳实践 --- 规范&quot;">​</a></h2><ul><li>选择最佳实践</li></ul><p>没有时间讨论最佳实践或者不知道有哪些最佳实践，就直接选择一个社区的规范。</p><ul><li>实现最佳实践</li></ul><p>配置 lint prettier 等工具让规范自动约束开发者的行为。</p><p>linter --- styleLint eslint markdownlint</p><p>formatter --- prettier</p><p>代码模板生产成--- plop</p><p>编辑器设置 --- .vscode</p><ul><li>如何执行规范</li></ul><p>保证你的情绪稳定、不要责怪他人、找到系统的解决方案、有能力，就要保护你的成员</p><h2 id="可访问性" tabindex="-1">可访问性 <a class="header-anchor" href="#可访问性" aria-label="Permalink to &quot;可访问性&quot;">​</a></h2><p><code>eslint-plugin-a11y</code>可帮助检查。</p><h2 id="vue-代码最佳实践" tabindex="-1">vue 代码最佳实践 <a class="header-anchor" href="#vue-代码最佳实践" aria-label="Permalink to &quot;vue 代码最佳实践&quot;">​</a></h2><p><a href="https://vue-styleguidist.github.io/" target="_blank" rel="noreferrer">Vue Styleguidist</a></p><p>这个有点繁琐了，进度不允许写这么多注释。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>这个课程没有想象中的好，只推荐 vue 使用 2 年内的看。</p>`,51),o=[e];function r(t,c,i,y,C,D){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{d as __pageData,b as default};
